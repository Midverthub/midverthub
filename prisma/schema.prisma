// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // a user can have zero or many products
  products Product[]

  // a user can have zero or many paid ads
  paidAds PaidAdvert[]

  //   a user can save zero or many products
  // product id of the saved product
  productId String? @db.ObjectId

  savedById     String? @db.ObjectId
  savedBy       User?   @relation("ProductSavedBy", fields: [savedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  savedProducts User[]  @relation("ProductSavedBy")

  // a user can be followed by zero or many users
  followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId

  // a user can follow zero or many users
  following    User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs String[] @db.ObjectId

  name  String? @unique
  email String? @unique
  phone String? @unique

  state          String?
  town           String?
  postalCode     String?
  hashedPassword String?   @unique
  emailVerified  DateTime?
  image          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  role          Role?           @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Categories {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String @unique
  image String

  // A category can have many product
  products Product[]
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  //one to many relationship i.e a product must have a user 
  //and a user can have many products
  // a product must have a user
  //the user that created the product the product is add to an array of products the user has
  //and the user id is saved in the product
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  //one to many relationship i.e a product must have a category 
  //and a category can have many products
  //the product is added to an array of products in this 
  //category and the category id is saved in the product
  categoryTitle String     @unique
  categories    Categories @relation(fields: [categoryTitle], references: [title]) //A product can have one category 

  // A product can have many reviews
  //   a product can save zero or many reviews

  productId String? @db.ObjectId

  reviewTitle String?
  review      String?

  ratingCount String?
  rating      String?

  reviewedBy Product?  @relation("ProductreviewdBy", fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviews    Product[] @relation("ProductreviewdBy")

  // A product can have many ratings

  // ratingBy Product?  @relation("ProductRatedBy", fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // ratings  Product[] @relation("ProductRatedBy")

  // A product can either be have a paid advert or not
  paidAdvert PaidAdvert?

  // paid        String? @default("no")
  images      String[]
  state       String?
  town        String?
  name        String
  condition   String?
  description String?
  price       String?
  negotation  String?
  phone       String?  @unique
  email       String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, reviewTitle, review])
  @@unique([id, review, reviewTitle])
}

model PaidAdvert {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  //one to many relationship i.e a paidAd must have a user 
  //and a user can have many paidAds
  //the paidAd is added to an array of paid advert that belongs to this user
  // and the user id is saved in the paidAd
  // a paid ad must have a user
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  //one to one relationship i.e a paidAd must have a product 
  //and a product either be a paidAd or not
  // a paid ad must be a product
  productId String  @unique @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  subscription String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// user
// user to product 1 to many
// user to review 1 to many
// user to rating 1 to many
// user to paidad 1 to many
// user to savedProduct 1 to many
// user to followers 1 to many
// user to following 1 to many

// product
// product to user 1 to 1
// product to category 1 to 1
// product to review 1 to many
// product to rating 1 to many
// product to paidad 1 to 1

// category
// category to product 1 to many

// savedProduct
// savedProduct to user 1 to 1

// review
// // review to user 1 to 1
// review to product 1 to 1
// review to rating 1 to 1

// rating
// // rating to user 1 to 1
// rating to product 1 to 1
// rating to review 1 to 1

// paidad
// paidad to user 1 to 1
// paidad to product 1 to 1

// each user should have an array of followers and following

// npx prisma generate
// npx prisma db push
